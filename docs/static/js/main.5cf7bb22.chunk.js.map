{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAyCeA,EAtCK,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAEpB,EAAmCC,mBAAS,cAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAuBA,OAEQ,uBAAMC,SAjBO,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,KAKdO,QAAQC,IAAI,iBAMR,UACA,6BAAMT,IACN,uBACAU,KAAK,OACLC,MAAOX,EACPY,SA5BkB,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,c,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIKA,EAAKC,OAJV,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAKA,QC8BFO,EAlCC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGZ,ECHqB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OArBAC,qBAAW,WAEPxB,EAAQC,GAAUwB,MAAM,SAAAC,GAKhBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAStB,CAAEpB,IAGEqB,EDzB6BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QASxB,OACI,qCACA,6BAAKpB,IAEHoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAIOH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEM3BgB,MA9Bf,WAGI,MAAoC3C,mBAAS,CAAC,YAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAQA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAAyBA,SAAWA,GAArBA,YCd/B6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.5cf7bb22.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories }) => {\n\n    const [inputValue,setInputValue] = useState('Hola Mundo');\n\n    const handleInputChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2 ){\n        setCategories( cats => [inputValue, ...cats ]);\n        setInputValue('');\n\n        }\n        \n\n        console.log('Submit hecho')\n\n    }\n\n    return (\n        \n            <form onSubmit={ handleSubmit }>\n            <h1>{ inputValue }</h1>\n            <input \n            type=\"text\"\n            value={inputValue}\n            onChange={ handleInputChange}\n            />\n            </form>\n    )\n}\n\nexport default AddCategory\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=XwZu3fNyk98ZK3u95iAcfQPG9qOZwoii`;\n    const resp = await fetch( url );\n    const { data }  = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n\n\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    //console.log( id, title, url )\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={ title } />\n            <p>{ title }</p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nconst GifGrid = ({ category }) => {\n\n  \n       const { data:images, loading } = useFetchGifs( category );\n       \n    \n\n    \n\n    //getGifs();\n\n    \n    return (\n        <>\n        <h3>{category}</h3>\n\n        { loading && <p>Loading</p>}\n        \n        {<div className=\"card-grid\">\n           \n            \n                {\n                images.map( img => (\n                    <GifGridItem key={img.id} {...img} />\n                ))\n                }\n            \n            \n            \n        </div> }\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n        getGifs(category).then( imgs => {\n            \n            \n                //console.log(imgs);\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n         \n            \n        })\n\n\n\n    }, [ category ])\n\n   \n    return state; // { data: [], loading: true }\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp() {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['Re Zero']);\n\n    //const handleAdd = (e) => {\n\n        //setCategories([...categories,'HunterXHunter'])\n\n    //}\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n           \n\n            <ol>\n                {\n                    categories.map(category => {\n                        return <GifGrid key ={category} category={ category }/>\n                    })\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GifExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}